// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum KeyType {
  email
  cpf
  cnpj
  celular
  aleatoria
}

enum MaritalStatus {
  solteiro
  casado
  divorciado
  viuvo
}

enum HouseType {
  residencial
  comercial
}

model Tenant {
  id             String        @id @default(cuid())
  name           String
  rg             String        @db.VarChar(15)
  rgEmitter      String        @default("SSP/CE") @map("rg_emitter") @db.VarChar(50)
  cpf            String        @unique @db.Char(11)
  maritalStatus  MaritalStatus @default(solteiro) @map("marital_status")
  profession     String        @db.VarChar(100)
  primaryPhone   String        @map("primary_phone") @db.VarChar(25)
  secondaryPhone String?       @map("secondary_phone") @db.VarChar(25)
  email          String?
  debit          Decimal?
  pixKeys        PixKey[]
  waterId        String?       @unique @map("water_id") @db.VarChar(50)
  electricityId  String?       @unique @map("electricity_id") @db.VarChar(50)
  lastPayment    DateTime?     @map("last_payment")
  obs            String?       @db.VarChar(255)
  contract       Contract[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([rg, rgEmitter])
}

model PixKey {
  id       String  @id @default(cuid())
  keyType     KeyType @map("key_type")
  key      String  @unique @db.VarChar(50)
  client   Tenant  @relation(fields: [clientId], references: [id])
  clientId String  @map("client_id")

  @@index([clientId])
}

model House {
  id            String     @id() @default(cuid())
  number        String     @db.VarChar(20)
  street        String
  complement    String
  neighborhood  String     @db.VarChar(100)
  city          String     @db.VarChar(100)
  iptu          String     @db.Char(14)
  type          HouseType  @default(residencial)
  waterId       String     @unique @map("water_id") @db.VarChar(50)
  electricityId String     @unique @map("electricity_id") @db.VarChar(50)
  description   String?    @db.VarChar(4000)
  contract      Contract[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Witness {
  id             String    @id @default(cuid())
  name           String    
  rg             String    @db.VarChar(15) @unique
  rgEmitter      String    @default("SSP/CE") @map("rg_emitter") @db.VarChar(50)
  cpf            String    @unique @db.Char(11)
  primaryPhone   String    @map("primary_phone") @db.VarChar(25)
  secondaryPhone String?   @map("secondary_phone") @db.VarChar(25)
  email          String?
  contract       Contract @relation(fields: [contractId], references: [id])
  contractId    String   @map("contract_id")

  @@unique([rg, rgEmitter])
  @@index([contractId])
}

model Contract {
  id          String    @id @default(cuid())
  dueDay      Int?      @map("due_date") @db.TinyInt() //dia de pagamento
  initialDate DateTime  @map("initial_date")
  endingDate  DateTime? @map("ending_date")
  rent        Decimal   @db.Decimal(7, 2)
  bail        Decimal   @db.Decimal(7, 2)
  duration    Int       @default(12) @db.TinyInt()
  interest    Decimal   @default(1.00) @db.Decimal(4, 2) //
  arrears     Decimal   @default(10.00) @db.Decimal(4, 2) // mora
  witnesses   Witness[]
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  tenantId    String    @map("tenant_id")
  house       House     @relation(fields: [houseId], references: [id])
  houseId     String    @map("house_id")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([houseId, tenantId, initialDate])
  @@index([houseId])
  @@index([tenantId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("USER")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
